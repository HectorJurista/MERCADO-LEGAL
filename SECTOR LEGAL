import React, { useState, useEffect } from 'react';

export default function LegalMarketplace() {
  const [searchQuery, setSearchQuery] = useState('');
  const [searchResults, setSearchResults] = useState<any[]>([]);
  const [sortBy, setSortBy] = useState('relevance');
  const [filterByArea, setFilterByArea] = useState('');
  const [isAIEnabled, setIsAIEnabled] = useState(true); // AI Agent toggle
  const [marketplaceTrends, setMarketplaceTrends] = useState<any[]>([]); // Simulated trends
  const [userLocation, setUserLocation] = useState<string | null>(null);

  const legalAreas = [
    'Corporate Law',
    'Intellectual Property',
    'Criminal Law',
    'Family Law',
    'Real Estate Law',
    'Immigration Law',
    'Environmental Law',
    'Contract Law',
  ];

  // Simulate data fetching and AI agent interaction
  useEffect(() => {
    // Simulate fetching initial search results (replace with actual API calls)
    const initialResults = [
      { id: 1, title: 'Law Firm A', area: 'Corporate Law', rating: 4.5, price: 200, description: 'Expert corporate legal services.', location: 'New York' },
      { id: 2, title: 'Lawyer B', area: 'Intellectual Property', rating: 4.2, price: 150, description: 'Specializing in patent and trademark law.', location: 'Los Angeles' },
      { id: 3, title: 'Legal Aid C', area: 'Criminal Law', rating: 4.8, price: 100, description: 'Providing criminal defense services.', location: 'Chicago' },
    ];
    setSearchResults(initialResults);

    // Simulate fetching marketplace trends
    const trends = [
      { area: 'Corporate Law', growth: 15 },
      { area: 'Intellectual Property', growth: 10 },
      { area: 'Family Law', growth: 5 },
    ];
    setMarketplaceTrends(trends);

    // Simulate AI agent adapting to trends (replace with actual AI logic)
    if (isAIEnabled) {
      const emergingArea = trends.sort((a, b) => b.growth - a.growth)[0].area;
      console.log(`AI Agent: Adapting to focus on emerging area: ${emergingArea}`);
    }

    // Simulate user location fetching
    setUserLocation("New York"); // Replace with actual location detection

  }, [isAIEnabled]);

  const handleSearch = (e: React.ChangeEvent<HTMLInputElement>) => {
    setSearchQuery(e.target.value);

    // Simulate real-time search based on input
    const filteredResults = searchResults.filter(result =>
      result.title.toLowerCase().includes(e.target.value.toLowerCase()) ||
      result.area.toLowerCase().includes(e.target.value.toLowerCase()) ||
      result.description.toLowerCase().includes(e.target.value.toLowerCase())
    );
    setSearchResults(filteredResults);
  };

  const handleSort = (e: React.ChangeEvent<HTMLSelectElement>) => {
    setSortBy(e.target.value);
  };

  const handleFilter = (e: React.ChangeEvent<HTMLSelectElement>) => {
    setFilterByArea(e.target.value);

    const filteredResults = e.target.value === ''
      ? searchResults // Show all if no filter
      : searchResults.filter(result => result.area === e.target.value);
    setSearchResults(filteredResults);
  };

  const handleAIToggle = () => {
    setIsAIEnabled(!isAIEnabled);
  };

  // Sort the search results
  const sortedResults = [...searchResults].sort((a, b) => {
    if (sortBy === 'relevance') {
      return 0; // No actual relevance sorting here, just maintaining original order for demo
    } else if (sortBy === 'rating') {
      return b.rating - a.rating;
    } else if (sortBy === 'price') {
      return a.price - b.price;
    }
    return 0;
  });

  return (
    <div className="bg-gray-50 min-h-screen">
      <header className="bg-blue-700 text-white p-6">
        <div className="container mx-auto flex items-center justify-between">
          <h1 className="text-2xl font-semibold">Global Legal Marketplace</h1>
          <div className="flex items-center space-x-4">
            <input
              type="text"
              placeholder="Search for lawyers, firms, areas..."
              className="text-gray-700 rounded-md px-4 py-2 w-64 focus:outline-none focus:ring-2 focus:ring-blue-500"
              value={searchQuery}
              onChange={handleSearch}
            />
            <button className="bg-blue-500 hover:bg-blue-600 text-white font-semibold rounded-md px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-400">Search</button>
          </div>
        </div>
      </header>

      <div className="container mx-auto mt-8 px-4">
        <div className="flex justify-between items-center mb-4">
          <div className="flex items-center space-x-4">
            <label htmlFor="sortBy" className="font-semibold text-gray-700">Sort by:</label>
            <select
              id="sortBy"
              className="rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
              value={sortBy}
              onChange={handleSort}
            >
              <option value="relevance">Relevance</option>
              <option value="rating">Rating</option>
              <option value="price">Price</option>
            </select>
          </div>
          <div className="flex items-center space-x-4">
            <label htmlFor="filterByArea" className="font-semibold text-gray-700">Filter by Area:</label>
            <select
              id="filterByArea"
              className="rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
              value={filterByArea}
              onChange={handleFilter}
            >
              <option value="">All Areas</option>
              {legalAreas.map(area => (
                <option key={area} value={area}>{area}</option>
              ))}
            </select>
          </div>

          <div className="flex items-center space-x-2">
              <label htmlFor="aiToggle" className="font-semibold text-gray-700">AI Agent:</label>
              <button
                  id="aiToggle"
                  className={`rounded-full w-12 h-6 flex items-center ${isAIEnabled ? 'bg-green-500' : 'bg-gray-400'}`}
                  onClick={handleAIToggle}
              >
                  <span className={`block w-5 h-5 rounded-full bg-white shadow-md transform transition-transform duration-200 ${isAIEnabled ? 'translate-x-6' : 'translate-x-0'}`}></span>
              </button>
          </div>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {sortedResults.map(result => (
            <div key={result.id} className="bg-white rounded-lg shadow-md p-4">
              <h2 className="text-xl font-semibold text-gray-800">{result.title}</h2>
              <p className="text-gray-600">{result.area}</p>
              <p className="text-gray-700 mt-2">{result.description}</p>
              <div className="mt-4 flex justify-between items-center">
                <span className="text-yellow-500">Rating: {result.rating}</span>
                <span className="text-green-500">Price: ${result.price}</span>
              </div>
              <div className="mt-2">
                <span className="text-blue-500">Location: {result.location}</span>
              </div>
            </div>
          ))}
        </div>

        <div className="mt-8">
          <h2 className="text-xl font-semibold text-gray-800 mb-4">Marketplace Trends</h2>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {marketplaceTrends.map(trend => (
              <div key={trend.area} className="bg-white rounded-lg shadow-md p-4">
                <h3 className="text-lg font-semibold text-gray-700">{trend.area}</h3>
                <p className="text-gray-600">Growth: {trend.growth}%</p>
              </div>
            ))}
          </div>
        </div>

        {userLocation && (
          <div className="mt-8">
            <h2 className="text-xl font-semibold text-gray-800 mb-4">Your Location</h2>
            <p className="text-gray-700">Current Location: {userLocation}</p>
          </div>
        )}
      </div>
    </div>
  );
}
